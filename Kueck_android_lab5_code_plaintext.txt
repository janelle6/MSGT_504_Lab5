package com.example.user.kuecklab5msgt504;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorManager;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import java.text.SimpleDateFormat;
import java.util.Date;

import static android.hardware.SensorManager.*;

public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {

    private GoogleMap mMap;
    private SensorManager sensorManager;
    private Sensor accelerometer;

    long lastUpdate  = 0;
    private float last_x, last_y, last_z;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
        //SETUP THE ACCELEROMETER, AND ASK FOR THE DEVICE TO "LISTEN" FOR THE ACCELEROMETER
        sensorManager = (SensorManager) this.getSystemService(Context.SENSOR_SERVICE);
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        boolean listener = registerListener(this, accelerometer, SENSOR_DELAY_NORMAL);
    }

    private boolean registerListener(MapsActivity mapsActivity, Sensor accelerometer, int sensorDelayNormal) {
        return false;
    }

    public void onSensorChanged(SensorEvent event) {
        Sensor mySensor = event.sensor;

        if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float x = event.values [0];
            float y = event.values [1];
            float z = event.values [2];

            long curTime = System.currentTimeMillis();

            if (Math.abs(curTime - lastUpdate) > 2000) {
                SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
                String currentDateTime = date.format(new Date());

                lastUpdate = curTime;

                if (Math.abs(last_x - x) >10) {
                    mMap.addMarker(new MarkerOptions()
                    .position (new LatLng(47.3293, -122.5801))
                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA))
                    .title("hey you moved on + currentDateTime"));
                }
                if (Math.abs(last_y - y) >10) {
                    mMap.addMarker(new MarkerOptions()
                            .position (new LatLng(47.3293, -122.5801))
                            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA))
                            .title("hey you moved on + currentDateTime"));
                }
                if (Math.abs(last_z - z) >10) {
                    mMap.addMarker(new MarkerOptions()
                            .position (new LatLng(47.3293, -122.5801))
                            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_MAGENTA))
                            .title("hey you moved on + currentDateTime"));
                }
                last_x = x;
                last_y = y;
                last_z = z;
            }
        }
    }

    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }
    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        // Add a marker in Sydney and move the camera
        LatLng tacoma = new LatLng(47.3293, -122.5801);
        mMap.addMarker(new MarkerOptions().position(tacoma).title("Marker in Tacoma"));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(tacoma));
    }
}
